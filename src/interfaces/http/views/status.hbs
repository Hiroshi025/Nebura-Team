<!DOCTYPE html>
<html lang="es" data-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}} - Status Dashboard</title>
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=JetBrains+Mono:wght@400;700&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary: #6366f1;
      --primary-dark: #4f46e5;
      --success: #10b981;
      --warning: #f59e0b;
      --danger: #ef4444;
      --dark-0: #0f172a;
      --dark-1: #1e293b;
      --dark-2: #334155;
      --dark-3: #475569;
      --light-0: #f8fafc;
      --light-1: #f1f5f9;
      --light-2: #e2e8f0;
      --light-3: #cbd5e1;
      --transition: all 0.3s ease;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Roboto', sans-serif;
      background-color: var(--dark-0);
      color: var(--light-1);
      line-height: 1.6;
      transition: var(--transition);
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
    }

    body[data-theme="light"] {
      background-color: var(--light-1);
      color: var(--dark-0);
    }

    body[data-theme="light"] .card,
    body[data-theme="light"] .status-header,
    body[data-theme="light"] .panel {
      background-color: var(--light-0);
      color: var(--dark-0);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    body[data-theme="light"] .card:hover,
    body[data-theme="light"] .panel:hover {
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at 10% 20%, rgba(99, 102, 241, 0.1) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(239, 68, 68, 0.1) 0%, transparent 20%);
      z-index: -1;
      opacity: 0.5;
      transition: var(--transition);
    }

    body[data-theme="light"]::before {
      opacity: 0.3;
      background: radial-gradient(circle at 10% 20%, rgba(99, 102, 241, 0.05) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(239, 68, 68, 0.05) 0%, transparent 20%);
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--dark-2);
    }

    body[data-theme="light"] .header {
      border-bottom-color: var(--light-3);
    }

    .logo {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .logo i {
      font-size: 2rem;
      color: var(--primary);
    }

    .logo h1 {
      font-size: 1.8rem;
      font-weight: 700;
      background: linear-gradient(90deg, var(--primary), var(--primary-dark));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
    }

    .controls {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .theme-toggle,
    .language-toggle,
    .view-toggle,
    .export-btn {
      background: var(--dark-1);
      border: none;
      color: var(--light-2);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: var(--transition);
    }

    body[data-theme="light"] .theme-toggle,
    body[data-theme="light"] .language-toggle,
    body[data-theme="light"] .view-toggle,
    body[data-theme="light"] .export-btn {
      background: var(--light-2);
      color: var(--dark-2);
    }

    .theme-toggle:hover,
    .language-toggle:hover,
    .view-toggle:hover,
    .export-btn:hover {
      background: var(--dark-2);
      color: var(--light-1);
    }

    body[data-theme="light"] .theme-toggle:hover,
    body[data-theme="light"] .language-toggle:hover,
    body[data-theme="light"] .view-toggle:hover,
    body[data-theme="light"] .export-btn:hover {
      background: var(--light-3);
      color: var(--dark-1);
    }

    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .card {
      background: var(--dark-1);
      border-radius: 12px;
      padding: 1.5rem;
      transition: var(--transition);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .card::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: var(--primary);
    }

    .card.healthy::after {
      background: var(--success);
    }

    .card.warning::after {
      background: var(--warning);
    }

    .card.error::after {
      background: var(--danger);
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .card-title {
      font-size: 1.2rem;
      font-weight: 500;
    }

    .card-icon {
      font-size: 1.5rem;
      color: var(--primary);
    }

    .card.healthy .card-icon {
      color: var(--success);
    }

    .card.warning .card-icon {
      color: var(--warning);
    }

    .card.error .card-icon {
      color: var(--danger);
    }

    .card-content {
      font-family: 'JetBrains Mono', monospace;
    }

    .status-badge {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 500;
      background: var(--dark-2);
      color: var(--light-2);
    }

    .status-badge.healthy {
      background: var(--success);
      color: white;
    }

    .status-badge.warning {
      background: var(--warning);
      color: white;
    }

    .status-badge.error {
      background: var(--danger);
      color: white;
    }

    .progress-container {
      margin-top: 1rem;
    }

    .progress-label {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
    }

    .progress-bar {
      height: 8px;
      background: var(--dark-2);
      border-radius: 4px;
      overflow: hidden;
    }

    body[data-theme="light"] .progress-bar {
      background: var(--light-3);
    }

    .progress-fill {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      transition: width 0.6s ease;
    }

    .progress-fill.healthy {
      background: var(--success);
    }

    .progress-fill.warning {
      background: var(--warning);
    }

    .progress-fill.error {
      background: var(--danger);
    }

    .detail-panels {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .panel {
      background: var(--dark-1);
      border-radius: 12px;
      padding: 1.5rem;
      transition: var(--transition);
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .panel:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.15);
    }

    .panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--dark-2);
    }

    body[data-theme="light"] .panel-header {
      border-bottom-color: var(--light-3);
    }

    .panel-title {
      font-size: 1.3rem;
      font-weight: 500;
    }

    .panel-content {
      overflow-x: auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th,
    td {
      padding: 0.75rem 1rem;
      text-align: left;
      border-bottom: 1px solid var(--dark-2);
    }

    body[data-theme="light"] th,
    body[data-theme="light"] td {
      border-bottom-color: var(--light-3);
    }

    th {
      font-weight: 500;
      color: var(--light-2);
      background: var(--dark-2);
    }

    body[data-theme="light"] th {
      color: var(--dark-2);
      background: var(--light-3);
    }

    tr:hover {
      background: var(--dark-2);
    }

    body[data-theme="light"] tr:hover {
      background: var(--light-2);
    }

    .cpu-cores {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }

    .cpu-core {
      background: var(--dark-2);
      border-radius: 8px;
      padding: 1rem;
      transition: var(--transition);
    }

    body[data-theme="light"] .cpu-core {
      background: var(--light-2);
    }

    .cpu-core:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
    }

    .cpu-core-title {
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
      color: var(--light-3);
    }

    body[data-theme="light"] .cpu-core-title {
      color: var(--dark-3);
    }

    .uptime-display {
      font-size: 1.5rem;
      font-weight: 700;
      background: linear-gradient(90deg, var(--primary), var(--primary-dark));
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      margin: 1rem 0;
    }

    .footer {
      text-align: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid var(--dark-2);
      color: var(--light-3);
      font-size: 0.9rem;
    }

    body[data-theme="light"] .footer {
      border-top-color: var(--light-3);
      color: var(--dark-3);
    }

    /* Animations */
    @keyframes pulse {
      0% {
        opacity: 0.6;
      }

      50% {
        opacity: 1;
      }

      100% {
        opacity: 0.6;
      }
    }

    .pulse {
      animation: pulse 2s infinite;
    }

    @keyframes float {
      0% {
        transform: translateY(0px);
      }

      50% {
        transform: translateY(-5px);
      }

      100% {
        transform: translateY(0px);
      }
    }

    .floating {
      animation: float 3s ease-in-out infinite;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .controls {
        width: 100%;
        justify-content: space-between;
      }

      .status-grid {
        grid-template-columns: 1fr;
      }

      .cpu-cores {
        grid-template-columns: 1fr 1fr;
      }
    }

    @media (max-width: 480px) {
      .container {
        padding: 1rem;
      }

      .cpu-cores {
        grid-template-columns: 1fr;
      }
    }

    /* Nuevos estilos para las mejoras */
    .progress-fill {
      transition: width 1s ease-in-out;
    }

    .pulse-warning {
      animation: pulse 1.5s infinite, colorPulseWarning 2s infinite;
    }

    .pulse-error {
      animation: pulse 1s infinite, colorPulseError 1.5s infinite;
    }

    @keyframes colorPulseWarning {
      0% {
        background-color: #f59e0b;
      }

      50% {
        background-color: #fbbf24;
      }

      100% {
        background-color: #f59e0b;
      }
    }

    @keyframes colorPulseError {
      0% {
        background-color: #ef4444;
      }

      50% {
        background-color: #f87171;
      }

      100% {
        background-color: #ef4444;
      }
    }

    .refresh-controls {
      display: flex;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1.5rem;
      background: var(--dark-1);
      padding: 1rem;
      border-radius: 8px;
      flex-wrap: wrap;
    }

    body[data-theme="light"] .refresh-controls {
      background: var(--light-2);
    }

    .refresh-label {
      font-size: 0.9rem;
      color: var(--light-3);
    }

    body[data-theme="light"] .refresh-label {
      color: var(--dark-3);
    }

    .refresh-options {
      display: flex;
      gap: 0.5rem;
    }

    .refresh-option {
      padding: 0.5rem 1rem;
      background: var(--dark-2);
      border-radius: 4px;
      cursor: pointer;
      transition: var(--transition);
    }

    body[data-theme="light"] .refresh-option {
      background: var(--light-3);
    }

    .refresh-option:hover,
    .refresh-option.active {
      background: var(--primary);
      color: white;
    }

    .chart-container {
      position: relative;
      height: 300px;
      margin-top: 1.5rem;
    }

    .chart-title {
      font-size: 1rem;
      margin-bottom: 0.5rem;
      color: var(--light-3);
    }

    body[data-theme="light"] .chart-title {
      color: var(--dark-3);
    }

    .toast-warning {
      background: linear-gradient(90deg, #f59e0b, #fbbf24);
    }

    .toast-error {
      background: linear-gradient(90deg, #ef4444, #f87171);
    }

    /* Nuevos estilos para vista compacta */
    .compact-view .detail-panels,
    .compact-view .panel:not(.always-visible) {
      display: none;
    }

    .compact-view .status-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }

    .compact-view .card-content p:not(.essential),
    .compact-view .card-content div:not(.essential) {
      display: none;
    }

    .compact-view .card {
      padding: 1rem;
    }

    /* Estilos para el menú de exportación */
    .export-menu {
      position: absolute;
      background: var(--dark-1);
      border-radius: 8px;
      padding: 0.5rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
      z-index: 100;
      display: none;
      flex-direction: column;
      gap: 0.25rem;
    }

    body[data-theme="light"] .export-menu {
      background: var(--light-1);
    }

    .export-menu.show {
      display: flex;
    }

    .export-option {
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      transition: var(--transition);
    }

    .export-option:hover {
      background: var(--primary);
      color: white;
    }

    /* Indicador de actualización en tiempo real */
    .update-indicator {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      background: var(--dark-1);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.8rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      z-index: 50;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    body[data-theme="light"] .update-indicator {
      background: var(--light-2);
    }

    .update-indicator .pulse-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--success);
      animation: pulse 1.5s infinite;
    }

    .update-indicator.updating .pulse-dot {
      background: var(--primary);
    }

    /* Tooltip */
    .tooltip {
      position: relative;
      display: inline-block;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      width: 120px;
      background-color: var(--dark-2);
      color: var(--light-1);
      text-align: center;
      border-radius: 6px;
      padding: 5px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -60px;
      opacity: 0;
      transition: opacity 0.3s;
      font-size: 0.8rem;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div class="logo">
        <i class="fas fa-heartbeat floating"></i>
        <h1>System Status</h1>
      </div>
      <div class="controls">
        <button class="theme-toggle" id="themeToggle">
          <i class="fas fa-moon"></i>
          <span class="lang-en">Dark Mode</span>
          <span class="lang-es" style="display: none;">Modo Oscuro</span>
        </button>
        <button class="language-toggle" id="languageToggle">
          <i class="fas fa-language"></i>
          <span class="lang-en">English</span>
          <span class="lang-es" style="display: none;">Español</span>
        </button>
        <button class="view-toggle" id="viewToggle">
          <i class="fas fa-expand"></i>
          <span class="lang-en">Detailed View</span>
          <span class="lang-es" style="display: none;">Vista Detallada</span>
        </button>
        <div class="tooltip">
          <button class="export-btn" id="exportBtn">
            <i class="fas fa-download"></i>
            <span class="lang-en">Export</span>
            <span class="lang-es" style="display: none;">Exportar</span>
          </button>
          <span class="tooltiptext lang-en">Export historical data</span>
          <span class="tooltiptext lang-es" style="display: none;">Exportar datos históricos</span>
        </div>
        <div class="export-menu" id="exportMenu">
          <div class="export-option" data-format="csv">
            <i class="fas fa-file-csv"></i>
            <span class="lang-en">Export as CSV</span>
            <span class="lang-es" style="display: none;">Exportar como CSV</span>
          </div>
          <div class="export-option" data-format="json">
            <i class="fas fa-file-code"></i>
            <span class="lang-en">Export as JSON</span>
            <span class="lang-es" style="display: none;">Exportar como JSON</span>
          </div>
        </div>
      </div>
    </header>

    <!-- Selector de intervalo de actualización -->
    <div class="refresh-controls">
      <span class="refresh-label lang-en">Refresh Interval:</span>
      <span class="refresh-label lang-es" style="display: none;">Intervalo de actualización:</span>
      <div class="refresh-options">
        <div class="refresh-option active" data-interval="5000">5s</div>
        <div class="refresh-option" data-interval="10000">10s</div>
        <div class="refresh-option" data-interval="30000">30s</div>
        <div class="refresh-option" data-interval="60000">1m</div>
        <div class="refresh-option" data-interval="0">
          <span class="lang-en">Pause</span>
          <span class="lang-es" style="display: none;">Pausar</span>
        </div>
      </div>
      <div style="margin-left: auto; display: flex; align-items: center; gap: 0.5rem;">
        <span class="refresh-label lang-en">Real-time updates:</span>
        <span class="refresh-label lang-es" style="display: none;">Actualizaciones en tiempo real:</span>
        <label class="switch">
          <input type="checkbox" id="realTimeToggle" checked>
          <span class="slider round"></span>
        </label>
      </div>
    </div>

    <div class="status-grid">
      <!-- Tarjeta de Estado General -->
      <div class="card healthy" id="overall-status-card">
        <div class="card-header">
          <h2 class="card-title lang-en">Overall Status</h2>
          <h2 class="card-title lang-es" style="display: none;">Estado General</h2>
          <i class="fas fa-check-circle card-icon pulse-healthy"></i>
        </div>
        <div class="card-content">
          <span class="status-badge healthy lang-en">Healthy</span>
          <span class="status-badge healthy lang-es" style="display: none;">Saludable</span>
          <p class="lang-en essential" style="margin-top: 0.5rem;">All systems operational</p>
          <p class="lang-es essential" style="margin-top: 0.5rem; display: none;">Todos los sistemas operativos</p>
        </div>
      </div>

      <!-- Tarjeta de Uso de Memoria -->
      <div class="card" id="memory-card">
        <div class="card-header">
          <h2 class="card-title lang-en">Memory Usage</h2>
          <h2 class="card-title lang-es" style="display: none;">Uso de Memoria</h2>
          <i class="fas fa-memory card-icon" id="memory-icon"></i>
        </div>
        <div class="card-content">
          <div class="progress-container">
            <div class="progress-label">
              <span>{{formatBytes health.info.memory.heapUsed}} of {{formatBytes health.info.memory.heapTotal}}</span>
              <span>{{calculatePercentage health.info.memory.heapUsed health.info.memory.heapTotal}}%</span>
            </div>
            <div class="progress-bar">
              <div
                class="progress-fill {{getMemoryStatusClass health.info.memory.heapUsed health.info.memory.heapTotal}}"
                id="memory-progress"
                style="width: {{calculatePercentage health.info.memory.heapUsed health.info.memory.heapTotal}}%"></div>
            </div>
          </div>
          <div style="margin-top: 1rem; font-size: 0.9rem;">
            <div style="display: flex; justify-content: space-between;">
              <span class="lang-en">RSS:</span>
              <span class="lang-es" style="display: none;">RSS:</span>
              <span>{{formatBytes health.info.memory.rss}}</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin-top: 0.25rem;">
              <span class="lang-en">External:</span>
              <span class="lang-es" style="display: none;">Externo:</span>
              <span>{{formatBytes health.info.memory.external}}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Tarjeta de Uso de CPU -->
      <div class="card" id="cpu-card">
        <div class="card-header">
          <h2 class="card-title lang-en">CPU Usage</h2>
          <h2 class="card-title lang-es" style="display: none;">Uso de CPU</h2>
          <i class="fas fa-microchip card-icon" id="cpu-icon"></i>
        </div>
        <div class="card-content">
          <div class="progress-container">
            <div class="progress-label">
              <span class="lang-en">Process CPU</span>
              <span class="lang-es" style="display: none;">CPU Proceso</span>
              <span class="cpu-percent">{{toFixed2 health.info.cpu.process.cpuPercent}}%</span>
            </div>
            <div class="progress-bar">
              <div class="progress-fill {{getCPUStatusClass health.info.cpu.process.cpuPercent}}" id="cpu-progress"
                style="width: {{health.info.cpu.process.cpuPercent}}%"></div>
            </div>
          </div>
          <div style="margin-top: 1rem; font-size: 0.9rem;">
            <div style="display: flex; justify-content: space-between;">
              <span class="lang-en">User Time:</span>
              <span class="lang-es" style="display: none;">Tiempo Usuario:</span>
              <span>{{formatMs health.info.cpu.process.userMs}}</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin-top: 0.25rem;">
              <span class="lang-en">System Time:</span>
              <span class="lang-es" style="display: none;">Tiempo Sistema:</span>
              <span>{{formatMs health.info.cpu.process.systemMs}}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Tarjeta de Uptime -->
      <div class="card" id="uptime-card">
        <div class="card-header">
          <h2 class="card-title lang-en">Uptime</h2>
          <h2 class="card-title lang-es" style="display: none;">Tiempo Activo</h2>
          <i class="fas fa-clock card-icon"></i>
        </div>
        <div class="card-content">
          <div class="uptime-display" id="uptime-display">
            {{formatUptime health.info.uptime}}
          </div>
          <p class="lang-en essential">System has been running continuously</p>
          <p class="lang-es essential" style="display: none;">El sistema ha estado funcionando continuamente</p>
        </div>
      </div>
    </div>

    <!-- Gráficas históricas -->
    <div class="detail-panels">
      <div class="panel">
        <div class="panel-header">
          <h3 class="panel-title lang-en">Historical Metrics</h3>
          <h3 class="panel-title lang-es" style="display: none;">Métricas Históricas</h3>
          <i class="fas fa-chart-line"></i>
        </div>
        <div class="panel-content">
          <div class="chart-container">
            <p class="chart-title lang-en">CPU Usage History</p>
            <p class="chart-title lang-es" style="display: none;">Historial de Uso de CPU</p>
            <canvas id="cpuChart"></canvas>
          </div>
          <div class="chart-container">
            <p class="chart-title lang-en">Memory Usage History</p>
            <p class="chart-title lang-es" style="display: none;">Historial de Uso de Memoria</p>
            <canvas id="memoryChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Panel de núcleos CPU -->
      <div class="panel always-visible">
        <div class="panel-header">
          <h3 class="panel-title lang-en">CPU Cores Details</h3>
          <h3 class="panel-title lang-es" style="display: none;">Detalles de Núcleos CPU</h3>
          <span class="status-badge">{{health.info.cpu.system.length}} cores</span>
        </div>
        <div class="panel-content">
          <div class="cpu-cores">
            {{#each health.info.cpu.system}}
            <div class="cpu-core">
              <h4 class="cpu-core-title">Core {{this.core}}</h4>
              <div style="margin-bottom: 0.5rem;">
                <div
                  style="font-size: 0.8rem; margin-bottom: 0.25rem; display: flex; justify-content: space-between;">
                  <span>User:</span>
                  <span>{{calculatePercentage this.times.user (sumTimes this.times)}}%</span>
                </div>
                <div class="progress-bar" style="height: 6px;">
                  <div class="progress-fill"
                    style="width: {{calculatePercentage this.times.user (sumTimes this.times)}}%; background: #6366f1;">
                  </div>
                </div>
              </div>
              <div style="margin-bottom: 0.5rem;">
                <div
                  style="font-size: 0.8rem; margin-bottom: 0.25rem; display: flex; justify-content: space-between;">
                  <span>System:</span>
                  <span>{{calculatePercentage this.times.sys (sumTimes this.times)}}%</span>
                </div>
                <div class="progress-bar" style="height: 6px;">
                  <div class="progress-fill"
                    style="width: {{calculatePercentage this.times.sys (sumTimes this.times)}}%; background: #f59e0b;">
                  </div>
                </div>
              </div>
              <div>
                <div
                  style="font-size: 0.8rem; margin-bottom: 0.25rem; display: flex; justify-content: space-between;">
                  <span>Idle:</span>
                  <span>{{calculatePercentage this.times.idle (sumTimes this.times)}}%</span>
                </div>
                <div class="progress-bar" style="height: 6px;">
                  <div class="progress-fill"
                    style="width: {{calculatePercentage this.times.idle (sumTimes this.times)}}%; background: #10b981;">
                  </div>
                </div>
              </div>
            </div>
            {{/each}}
          </div>
        </div>
      </div>

      <div class="panel">
        <div class="panel-header">
          <h3 class="panel-title lang-en">Memory Details</h3>
          <h3 class="panel-title lang-es" style="display: none;">Detalles de Memoria</h3>
          <i class="fas fa-info-circle"></i>
        </div>
        <div class="panel-content">
          <table>
            <thead>
              <tr>
                <th class="lang-en">Type</th>
                <th class="lang-es" style="display: none;">Tipo</th>
                <th class="lang-en">Usage</th>
                <th class="lang-es" style="display: none;">Uso</th>
                <th class="lang-en">Percentage</th>
                <th class="lang-es" style="display: none;">Porcentaje</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="lang-en">Heap Total</td>
                <td class="lang-es" style="display: none;">Heap Total</td>
                <td>{{formatBytes health.info.memory.heapTotal}}</td>
                <td>100%</td>
              </tr>
              <tr>
                <td class="lang-en">Heap Used</td>
                <td class="lang-es" style="display: none;">Heap Usado</td>
                <td>{{formatBytes health.info.memory.heapUsed}}</td>
                <td>{{calculatePercentage health.info.memory.heapUsed health.info.memory.heapTotal}}%</td>
              </tr>
              <tr>
                <td class="lang-en">RSS</td>
                <td class="lang-es" style="display: none;">RSS</td>
                <td>{{formatBytes health.info.memory.rss}}</td>
                <td>{{calculatePercentage health.info.memory.rss health.info.memory.heapTotal}}%</td>
              </tr>
              <tr>
                <td class="lang-en">External</td>
                <td class="lang-es" style="display: none;">Externo</td>
                <td>{{formatBytes health.info.memory.external}}</td>
                <td>{{calculatePercentage health.info.memory.external health.info.memory.heapTotal}}%</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <footer class="footer">
      <p class="lang-en">Last updated: <span id="last-updated">{{formatDate now}}</span> - System Status Dashboard</p>
      <p class="lang-es" style="display: none;">Última actualización: <span id="last-updated">{{formatDate now}}</span>
        - Panel de Estado del Sistema</p>
    </footer>
  </div>

  <!-- Indicador de actualización en tiempo real -->
  <div class="update-indicator" id="updateIndicator">
    <div class="pulse-dot"></div>
    <span class="lang-en">Real-time updates active</span>
    <span class="lang-es" style="display: none;">Actualizaciones en tiempo real activas</span>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script>
    // Variables globales
    let refreshInterval = 5000;
    let refreshTimer;
    let cpuHistory = [];
    let memoryHistory = [];
    const maxHistoryPoints = 20;
    let isCompactView = false;
    let isRealTimeActive = true;
    let lastData = null;

    // Inicializar gráficos
    const cpuCtx = document.getElementById('cpuChart').getContext('2d');
    const memoryCtx = document.getElementById('memoryChart').getContext('2d');

    const cpuChart = new Chart(cpuCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'CPU Usage %',
          data: [],
          borderColor: '#6366f1',
          backgroundColor: 'rgba(99, 102, 241, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: function (value) {
                return value + '%';
              }
            }
          }
        }
      }
    });

    const memoryChart = new Chart(memoryCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Memory Usage %',
          data: [],
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: function (value) {
                return value + '%';
              }
            }
          }
        }
      }
    });

    // Función para actualizar los datos
    function updateData() {
      if (!isRealTimeActive) {
        document.getElementById('updateIndicator').classList.remove('updating');
        return;
      }

      document.getElementById('updateIndicator').classList.add('updating');
      
      fetch('/dashboard/utils/status-json')
        .then(response => response.json())
        .then(data => {
          lastData = data;
          
          // Actualizar tarjetas
          updateCards(data);

          // Actualizar gráficos
          updateCharts(data);

          // Actualizar última actualización
          document.getElementById('last-updated').textContent = new Date().toLocaleTimeString();

          // Verificar alertas
          checkAlerts(data);

          document.getElementById('updateIndicator').classList.remove('updating');
        })
        .catch(error => {
          console.error('Error fetching health data:', error);
          Toastify({
            text: "Error fetching system data",
            duration: 3000,
            className: "toast-error",
            gravity: "top",
            position: "right"
          }).showToast();
          document.getElementById('updateIndicator').classList.remove('updating');
        });
    }

    // Función para actualizar las tarjetas
    function updateCards(data) {
      // Actualizar memoria
      const memoryPercent = (data.memory.heapUsed / data.memory.heapTotal) * 100;
      document.getElementById('memory-progress').style.width = memoryPercent + '%';
      document.getElementById('memory-progress').className = 'progress-fill ' + getMemoryStatusClass(data.memory.heapUsed, data.memory.heapTotal);

      // Actualizar porcentaje y valores en la tarjeta de memoria
      const memoryLabel = document.querySelector('#memory-card .progress-label span:nth-child(1)');
      const memoryPercentLabel = document.querySelector('#memory-card .progress-label span:nth-child(2)');
      if (memoryLabel) memoryLabel.textContent = formatBytes(data.memory.heapUsed) + ' of ' + formatBytes(data.memory.heapTotal);
      if (memoryPercentLabel) memoryPercentLabel.textContent = calculatePercentage(data.memory.heapUsed, data.memory.heapTotal) + '%';

      // Actualizar RSS y External en la tarjeta de memoria
      const memoryRSS = document.querySelector('#memory-card .card-content > div:nth-child(2) > div:nth-child(1) span:last-child');
      const memoryExternal = document.querySelector('#memory-card .card-content > div:nth-child(2) > div:nth-child(2) span:last-child');
      if (memoryRSS) memoryRSS.textContent = formatBytes(data.memory.rss);
      if (memoryExternal) memoryExternal.textContent = formatBytes(data.memory.external);

      // Actualizar CPU
      const cpuPercent = data.cpu.process.cpuPercent;
      document.getElementById('cpu-progress').style.width = cpuPercent + '%';
      document.getElementById('cpu-progress').className = 'progress-fill ' + getCPUStatusClass(cpuPercent);

      // Actualizar porcentaje en la tarjeta de CPU
      const cpuPercentLabel = document.querySelector('#cpu-card .progress-label .cpu-percent');
      if (cpuPercentLabel) cpuPercentLabel.textContent = toFixed2(cpuPercent) + '%';

      // Actualizar User Time y System Time en la tarjeta de CPU
      const cpuUserTime = document.querySelector('#cpu-card .card-content > div:nth-child(2) > div:nth-child(1) span:last-child');
      const cpuSystemTime = document.querySelector('#cpu-card .card-content > div:nth-child(2) > div:nth-child(2) span:last-child');
      if (cpuUserTime) cpuUserTime.textContent = formatMs(data.cpu.process.userMs);
      if (cpuSystemTime) cpuSystemTime.textContent = formatMs(data.cpu.process.systemMs);

      // Actualizar uptime
      document.getElementById('uptime-display').textContent = formatUptime(data.uptime);

      // Actualizar panel de detalles de memoria
      const memoryTable = document.querySelector('.panel-content table');
      if (memoryTable) {
        // Heap Total
        memoryTable.rows[1].cells[2].textContent = formatBytes(data.memory.heapTotal);
        memoryTable.rows[1].cells[3].textContent = '100%';
        // Heap Used
        memoryTable.rows[2].cells[2].textContent = formatBytes(data.memory.heapUsed);
        memoryTable.rows[2].cells[3].textContent = calculatePercentage(data.memory.heapUsed, data.memory.heapTotal) + '%';
        // RSS
        memoryTable.rows[3].cells[2].textContent = formatBytes(data.memory.rss);
        memoryTable.rows[3].cells[3].textContent = calculatePercentage(data.memory.rss, data.memory.heapTotal) + '%';
        // External
        memoryTable.rows[4].cells[2].textContent = formatBytes(data.memory.external);
        memoryTable.rows[4].cells[3].textContent = calculatePercentage(data.memory.external, data.memory.heapTotal) + '%';
      }

      // Actualizar panel de núcleos CPU
      const cpuCores = document.querySelectorAll('.cpu-core');
      if (cpuCores.length === data.cpu.system.length) {
        data.cpu.system.forEach((core, idx) => {
          const sum = core.times.user + core.times.sys + core.times.idle + (core.times.nice || 0) + (core.times.irq || 0);
          // User
          cpuCores[idx].querySelectorAll('.progress-bar')[0].children[0].style.width = calculatePercentage(core.times.user, sum) + '%';
          cpuCores[idx].querySelectorAll('.progress-bar')[0].children[0].textContent = '';
          // System
          cpuCores[idx].querySelectorAll('.progress-bar')[1].children[0].style.width = calculatePercentage(core.times.sys, sum) + '%';
          cpuCores[idx].querySelectorAll('.progress-bar')[1].children[0].textContent = '';
          // Idle
          cpuCores[idx].querySelectorAll('.progress-bar')[2].children[0].style.width = calculatePercentage(core.times.idle, sum) + '%';
          cpuCores[idx].querySelectorAll('.progress-bar')[2].children[0].textContent = '';
          // Actualizar los porcentajes de texto
          cpuCores[idx].querySelectorAll('span')[1].textContent = calculatePercentage(core.times.user, sum) + '%';
          cpuCores[idx].querySelectorAll('span')[3].textContent = calculatePercentage(core.times.sys, sum) + '%';
          cpuCores[idx].querySelectorAll('span')[5].textContent = calculatePercentage(core.times.idle, sum) + '%';
        });
      }

      // Actualizar íconos según estado
      updateIcons(memoryPercent, cpuPercent);
    }

    // Helper para mostrar dos decimales en CPU
    function toFixed2(val) {
      return Number(val).toFixed(2);
    }
    
    // Helper para mostrar ms en formato legible
    function formatMs(ms) {
      if (ms < 1000) return ms + ' ms';
      if (ms < 60000) return (ms / 1000).toFixed(2) + ' s';
      if (ms < 3600000) return (ms / 60000).toFixed(2) + ' min';
      return (ms / 3600000).toFixed(2) + ' h';
    }

    // Función para actualizar gráficos
    function updateCharts(data) {
      const now = new Date();
      const timeLabel = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();

      // Asegura que los valores sean numéricos y válidos
      const memoryUsed = Number(data.memory?.heapUsed ?? 0);
      const memoryTotal = Number(data.memory?.heapTotal ?? 1); // evita división por cero
      const memoryPercent = memoryTotal > 0 ? (memoryUsed / memoryTotal) * 100 : 0;

      const cpuPercent = Number(data.cpu?.process?.cpuPercent ?? 0);

      // Agregar nuevos datos
      cpuHistory.push({ time: timeLabel, value: cpuPercent });
      memoryHistory.push({ time: timeLabel, value: memoryPercent });

      // Limitar historial
      if (cpuHistory.length > maxHistoryPoints) {
        cpuHistory.shift();
        memoryHistory.shift();
      }

      // Actualizar gráfico de CPU
      cpuChart.data.labels = cpuHistory.map(item => item.time);
      cpuChart.data.datasets[0].data = cpuHistory.map(item => item.value);
      cpuChart.update();

      // Actualizar gráfico de memoria
      memoryChart.data.labels = memoryHistory.map(item => item.time);
      memoryChart.data.datasets[0].data = memoryHistory.map(item => item.value);
      memoryChart.update();
    }

    // Función para verificar alertas
    function checkAlerts(data) {
      const memoryPercent = (data.memory.heapUsed / data.memory.heapTotal) * 100;
      const cpuPercent = data.cpu.process.cpuPercent;

      // Alerta de memoria
      if (memoryPercent > 90) {
        showAlert('High memory usage: ' + memoryPercent.toFixed(2) + '%', 'error');
      } else if (memoryPercent > 75) {
        showAlert('Warning: Memory usage at ' + memoryPercent.toFixed(2) + '%', 'warning');
      }

      // Alerta de CPU
      if (cpuPercent > 90) {
        showAlert('High CPU usage: ' + cpuPercent.toFixed(2) + '%', 'error');
      } else if (cpuPercent > 70) {
        showAlert('Warning: CPU usage at ' + cpuPercent.toFixed(2) + '%', 'warning');
      }
    }

    // Función para mostrar alertas
    function showAlert(message, type) {
      Toastify({
        text: message,
        duration: 5000,
        className: "toast-" + type,
        gravity: "top",
        position: "right"
      }).showToast();
    }

    // Función para actualizar íconos
    function updateIcons(memoryPercent, cpuPercent) {
      const memoryIcon = document.getElementById('memory-icon');
      const cpuIcon = document.getElementById('cpu-icon');

      // Actualizar ícono de memoria
      memoryIcon.className = 'fas fa-memory card-icon';
      if (memoryPercent > 90) {
        memoryIcon.classList.add('pulse-error');
      } else if (memoryPercent > 75) {
        memoryIcon.classList.add('pulse-warning');
      }

      // Actualizar ícono de CPU
      cpuIcon.className = 'fas fa-microchip card-icon';
      if (cpuPercent > 90) {
        cpuIcon.classList.add('pulse-error');
      } else if (cpuPercent > 70) {
        cpuIcon.classList.add('pulse-warning');
      }
    }

    // Helpers (similares a los del servidor)
    function formatUptime(seconds) {
      const days = Math.floor(seconds / (3600 * 24));
      const hours = Math.floor((seconds % (3600 * 24)) / 3600);
      const mins = Math.floor((seconds % 3600) / 60);
      const secs = Math.floor(seconds % 60);

      let result = [];
      if (days > 0) result.push(`${days}d`);
      if (hours > 0) result.push(`${hours}h`);
      if (mins > 0) result.push(`${mins}m`);
      if (secs > 0 || result.length === 0) result.push(`${secs}s`);

      return result.join(' ');
    }

    function getMemoryStatusClass(used, total) {
      const percentage = (used / total) * 100;
      if (percentage > 90) return 'error';
      if (percentage > 75) return 'warning';
      return 'healthy';
    }

    function getCPUStatusClass(percent) {
      if (percent > 90) return 'error';
      if (percent > 70) return 'warning';
      return 'healthy';
    }

    function formatBytes(bytes) {
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      if (bytes === 0) return '0 Bytes';
      const i = Math.floor(Math.log(bytes) / Math.log(1024));
      return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function calculatePercentage(part, total) {
      if (total === 0) return 0;
      return ((part / total) * 100).toFixed(2);
    }

    // Función para exportar datos
    function exportData(format) {
      if (!lastData) {
        showAlert('No data available to export', 'warning');
        return;
      }

      const dataToExport = {
        timestamp: new Date().toISOString(),
        cpuHistory: cpuHistory,
        memoryHistory: memoryHistory,
        currentStatus: lastData
      };

      let content, mimeType, extension;

      if (format === 'csv') {
        // Convertir a CSV
        let csvContent = "Timestamp,CPU Usage %,Memory Usage %\n";
        for (let i = 0; i < cpuHistory.length; i++) {
          csvContent += `${cpuHistory[i].time},${cpuHistory[i].value},${memoryHistory[i].value}\n`;
        }
        content = csvContent;
        mimeType = 'text/csv';
        extension = 'csv';
      } else {
        // JSON por defecto
        content = JSON.stringify(dataToExport, null, 2);
        mimeType = 'application/json';
        extension = 'json';
      }

      // Crear blob y descargar
      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `system-status-${new Date().toISOString().slice(0, 10)}.${extension}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    // Selector de intervalo de actualización
    document.querySelectorAll('.refresh-option').forEach(option => {
      option.addEventListener('click', function () {
        document.querySelectorAll('.refresh-option').forEach(opt => opt.classList.remove('active'));
        this.classList.add('active');
        refreshInterval = parseInt(this.dataset.interval);

        // Reiniciar el temporizador
        clearInterval(refreshTimer);
        if (refreshInterval > 0) {
          refreshTimer = setInterval(updateData, refreshInterval);
          updateData(); // Actualizar inmediatamente
        }
      });
    });

    // Alternar vista compacta/detallada
    const viewToggle = document.getElementById('viewToggle');
    viewToggle.addEventListener('click', () => {
      isCompactView = !isCompactView;
      document.body.classList.toggle('compact-view', isCompactView);
      
      if (isCompactView) {
        viewToggle.innerHTML = '<i class="fas fa-compress"></i>' + 
          '<span class="lang-en">Compact View</span>' + 
          '<span class="lang-es" style="display: none;">Vista Compacta</span>';
      } else {
        viewToggle.innerHTML = '<i class="fas fa-expand"></i>' + 
          '<span class="lang-en">Detailed View</span>' + 
          '<span class="lang-es" style="display: none;">Vista Detallada</span>';
      }
    });

    // Alternar actualizaciones en tiempo real
    const realTimeToggle = document.getElementById('realTimeToggle');
    realTimeToggle.addEventListener('change', function() {
      isRealTimeActive = this.checked;
      if (isRealTimeActive) {
        updateData(); // Actualizar inmediatamente si se reactiva
      }
    });

    // Menú de exportación
    const exportBtn = document.getElementById('exportBtn');
    const exportMenu = document.getElementById('exportMenu');
    
    exportBtn.addEventListener('click', function(e) {
      e.stopPropagation();
      exportMenu.classList.toggle('show');
    });
    
    document.querySelectorAll('.export-option').forEach(option => {
      option.addEventListener('click', function() {
        exportData(this.dataset.format);
        exportMenu.classList.remove('show');
      });
    });
    
    // Cerrar menú de exportación al hacer clic fuera
    document.addEventListener('click', function() {
      exportMenu.classList.remove('show');
    });

    // Iniciar actualización automática
    refreshTimer = setInterval(updateData, refreshInterval);
    updateData(); // Primera carga

    // Theme toggle
    const themeToggle = document.getElementById('themeToggle');
    themeToggle.addEventListener('click', () => {
      const currentTheme = document.body.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.body.setAttribute('data-theme', newTheme);

      // Update icon and text
      const icon = themeToggle.querySelector('i');
      if (newTheme === 'dark') {
        icon.classList.remove('fa-sun');
        icon.classList.add('fa-moon');
        document.querySelectorAll('.lang-en').forEach(el => el.style.display = '');
        document.querySelectorAll('.lang-es').forEach(el => el.style.display = 'none');
      } else {
        icon.classList.remove('fa-moon');
        icon.classList.add('fa-sun');
        document.querySelectorAll('.lang-en').forEach(el => el.style.display = 'none');
        document.querySelectorAll('.lang-es').forEach(el => el.style.display = '');
      }

      // Save preference
      localStorage.setItem('theme', newTheme);
    });

    // Language toggle
    const languageToggle = document.getElementById('languageToggle');
    languageToggle.addEventListener('click', () => {
      const currentLang = document.querySelector('.lang-en').style.display === 'none' ? 'es' : 'en';
      if (currentLang === 'en') {
        // Switch to Spanish
        document.querySelectorAll('.lang-en').forEach(el => el.style.display = 'none');
        document.querySelectorAll('.lang-es').forEach(el => el.style.display = '');
        languageToggle.querySelector('.lang-en').style.display = 'none';
        languageToggle.querySelector('.lang-es').style.display = '';
      } else {
        // Switch to English
        document.querySelectorAll('.lang-en').forEach(el => el.style.display = '');
        document.querySelectorAll('.lang-es').forEach(el => el.style.display = 'none');
        languageToggle.querySelector('.lang-en').style.display = '';
        languageToggle.querySelector('.lang-es').style.display = 'none';
      }

      // Save preference
      localStorage.setItem('language', currentLang === 'en' ? 'es' : 'en');
    });

    // Load saved preferences
    document.addEventListener('DOMContentLoaded', () => {
      const savedTheme = localStorage.getItem('theme') || 'dark';
      document.body.setAttribute('data-theme', savedTheme);

      const themeIcon = themeToggle.querySelector('i');
      if (savedTheme === 'light') {
        themeIcon.classList.remove('fa-moon');
        themeIcon.classList.add('fa-sun');
      }

      const savedLang = localStorage.getItem('language') || 'en';
      if (savedLang === 'es') {
        document.querySelectorAll('.lang-en').forEach(el => el.style.display = 'none');
        document.querySelectorAll('.lang-es').forEach(el => el.style.display = '');
        languageToggle.querySelector('.lang-en').style.display = 'none';
        languageToggle.querySelector('.lang-es').style.display = '';
      }
    });

    // Background animation
    document.addEventListener('mousemove', (e) => {
      const x = e.clientX / window.innerWidth;
      const y = e.clientY / window.innerHeight;

      document.body.style.setProperty('--mouse-x', x);
      document.body.style.setProperty('--mouse-y', y);
    });
  </script>
</body>

</html>